# CI/CD Pipeline pour Cureliah
name: CI/CD Production Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '8'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Tests et qualit√© du code
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run unit tests
        run: npm run test -- --coverage --watchAll=false --testPathIgnorePatterns="src/__tests__/BookingFlow.test.tsx|src/services/__tests__/monitoring.test.ts|src/__tests__/Auth.test.tsx|tests/integration/HowItWorksSection.integration.test.tsx|src/components/__tests__/ProtectedRouteSubscription.test.tsx"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  # Tests E2E avec Playwright
  e2e:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test
        env:
          CI: true
          VITE_APP_BASE_URL: https://cureliah.com
          VITE_API_URL: https://cureliah.com/api

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Tests de s√©curit√©
  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # D√©ploiement staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, e2e, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to staging
        env:
          STAGING_DEPLOY_URL: ${{ secrets.STAGING_DEPLOY_URL }}
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}
        run: |
          echo "D√©ploiement vers l'environnement staging"
          # TODO: Configurer le d√©ploiement staging

      - name: Run smoke tests
        run: |
          echo "Tests de fum√©e sur staging"
          # TODO: Tests de base post-d√©ploiement

  # D√©ploiement production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, e2e, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to production
        env:
          PRODUCTION_DEPLOY_URL: ${{ secrets.PRODUCTION_DEPLOY_URL }}
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
        run: |
          echo "D√©ploiement vers la production"
          # TODO: Configurer le d√©ploiement production

      - name: Run health checks
        run: |
          echo "V√©rification de la sant√© de l'application"
          # TODO: Health checks post-d√©ploiement

      - name: Notify deployment success
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: '#deployments'
          SLACK_MESSAGE: 'üöÄ Cureliah d√©ploy√© en production avec succ√®s!'
          SLACK_TITLE: 'D√©ploiement Production'
          SLACK_COLOR: 'good'

  # Backup automatique
  backup:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Create database backup
        run: |
          echo "Sauvegarde de la base de donn√©es"
          # TODO: Script de sauvegarde Supabase

      - name: Upload backup to storage
        run: |
          echo "Upload vers le stockage s√©curis√©"
          # TODO: Upload vers AWS S3 ou √©quivalent
