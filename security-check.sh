#!/bin/bash

# üîí Script de v√©rification de s√©curit√© Cureliah
# Usage: ./security-check.sh

echo "üîç AUDIT S√âCURIT√â CURELIAH"
echo "=========================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# 1. V√©rifier les fichiers de backup
echo -e "\n${YELLOW}1. Recherche de fichiers de backup...${NC}"
BACKUP_FILES=$(find . -name "*.bak" -o -name "*.backup" -o -name "*.tmp" -o -name "*.orig" 2>/dev/null | grep -v node_modules)
if [ -z "$BACKUP_FILES" ]; then
    print_result 0 "Aucun fichier de backup trouv√©"
else
    print_result 1 "Fichiers de backup d√©tect√©s:"
    echo "$BACKUP_FILES"
fi

# 2. V√©rifier les tokens JWT en dur
echo -e "\n${YELLOW}2. Recherche de tokens JWT...${NC}"
JWT_TOKENS=$(grep -r "eyJ" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" . 2>/dev/null | grep -v "package-lock.json")
if [ -z "$JWT_TOKENS" ]; then
    print_result 0 "Aucun token JWT en dur d√©tect√©"
else
    print_result 1 "Tokens JWT d√©tect√©s:"
    echo "$JWT_TOKENS"
fi

# 3. V√©rifier les cl√©s API/secrets
echo -e "\n${YELLOW}3. Recherche de cl√©s API/secrets...${NC}"
SECRETS=$(grep -r -E "(api_key|secret_key|private_key|client_secret)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ 2>/dev/null | grep -v "client_secret" | grep -v "VITE_")
if [ -z "$SECRETS" ]; then
    print_result 0 "Aucune cl√© en dur d√©tect√©e"
else
    print_result 1 "Cl√©s potentielles d√©tect√©es:"
    echo "$SECRETS"
fi

# 4. V√©rifier les URLs Supabase en dur
echo -e "\n${YELLOW}4. Recherche d'URLs Supabase...${NC}"
SUPABASE_URLS=$(grep -r "https://.*\.supabase\.co" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" . 2>/dev/null)
if [ -z "$SUPABASE_URLS" ]; then
    print_result 0 "Aucune URL Supabase en dur"
else
    print_result 1 "URLs Supabase d√©tect√©es:"
    echo "$SUPABASE_URLS"
fi

# 5. V√©rifier le .gitignore
echo -e "\n${YELLOW}5. V√©rification du .gitignore...${NC}"
if grep -q "\.env" .gitignore && grep -q "\.bak" .gitignore; then
    print_result 0 "Fichier .gitignore correctement configur√©"
else
    print_result 1 "Fichier .gitignore √† am√©liorer"
fi

# 6. V√©rifier les console.log avec donn√©es sensibles
echo -e "\n${YELLOW}6. Recherche de console.log sensibles...${NC}"
SENSITIVE_LOGS=$(grep -r "console\.log.*\(token\|key\|secret\|password\)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ 2>/dev/null)
if [ -z "$SENSITIVE_LOGS" ]; then
    print_result 0 "Aucun console.log sensible d√©tect√©"
else
    print_result 1 "Console.log sensibles d√©tect√©s:"
    echo "$SENSITIVE_LOGS"
fi

echo -e "\n${YELLOW}=========================="
echo -e "üéØ AUDIT TERMIN√â${NC}"
echo -e "\n${GREEN}Recommandations:${NC}"
echo "‚Ä¢ Ex√©cuter ce script avant chaque commit"
echo "‚Ä¢ R√©g√©n√©rer les cl√©s si expos√©es"
echo "‚Ä¢ Utiliser uniquement des variables d'environnement"
